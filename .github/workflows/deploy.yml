name: Build and Push Docker to AWS ECR

on:
  push:
    branches:
      - deploy

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'   # 원하는 버전 지정 가능 (예: 'v1.27.3')

      - name: Configure kubeconfig for EKS cluster
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name sandit-cluster

        # EKS 클러스터 접근을 위한 인증 토큰 생성 (15분짜리 임시 토큰)
        # GitHub Actions 환경에서는 자동으로 토큰 갱신이 안 되기 때문에,
        # kubectl apply 전에 수동으로 한 번 토큰 생성해서 인증 상태 확인해 줌
        # 이걸 안 넣으면 "failed to download openapi" 같은 인증 에러 발생 가능성 있음

      - name: Authenticate to EKS (generate token)
        run: |
          aws eks get-token --region ${{ secrets.AWS_REGION }} --cluster-name sandit-cluster > /dev/null

      - name: Create Kubernetes Secrets from GitHub Secrets
        run: |
          kubectl create secret generic front-service-secrets \
            --from-literal=KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }} \
            --from-literal=GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            --from-literal=GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            --from-literal=KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
            --from-literal=KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
            --from-literal=NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
            --from-literal=NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} \
            --from-literal=MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} \
            --from-literal=MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
            --from-literal=MAIL_FROM=${{ secrets.MAIL_FROM }} \
            --from-literal=OAUTH_STATE=${{ secrets.OAUTH_STATE }} \
            --from-literal=PORTONE_API_KEY=${{ secrets.PORTONE_API_KEY }} \
            --from-literal=PORTONE_API_SECRET=${{ secrets.PORTONE_API_SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t front-service:latest .

      - name: Tag Docker image
        run: |
          docker tag front-service:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/front-service:latest

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/front-service:latest

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/
